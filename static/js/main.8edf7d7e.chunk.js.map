{"version":3,"sources":["components/ChampDropRates.js","components/API.js","App.js","serviceWorker.js","index.js"],"names":["ChampDropRate","key","name","pool","cost","levels","level1","level2","level3","level4","level5","level6","level7","level8","level9","map","tier","console","log","React","Component","API","Fragment","App","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mTAiHeA,E,iLAZP,OACI,6BAlGgB,CAChB,CACIC,IAAK,QACLC,KAAM,SACNC,KAAM,GACNC,KAAM,EACNC,OAAQ,CACJ,CACIC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,MAIpB,CACIb,IAAK,QACLC,KAAM,SACNC,KAAM,GACNC,KAAM,EACNC,OAAQ,CACJ,CACIC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,MAIpB,CACIb,IAAK,QACLC,KAAM,SACNC,KAAM,GACNC,KAAM,EACNC,OAAQ,CACJ,CACIC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,EACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,MAIpB,CACIb,IAAK,QACLC,KAAM,SACNC,KAAM,GACNC,KAAM,EACNC,OAAQ,CACJ,CACIC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,EACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,GACRC,OAAQ,MAIpB,CACIb,IAAK,QACLC,KAAM,SACNC,KAAM,GACNC,KAAM,EACNC,OAAQ,CACJ,CACIC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,EACRC,OAAQ,EACRC,OAAQ,OAODC,KAAI,SAAAC,GAEfC,QAAQC,IAAIF,W,GAvGJG,IAAMC,WCiBnBC,E,iLAbP,OACI,kBAAC,IAAMC,SAAP,KACI,qDACA,6BACI,2BACI,kBAAC,EAAD,a,GAPNH,IAAMC,WCYTG,MAVf,WACI,OACI,kBAAC,IAAD,CAAYC,SAAS,KACjB,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,OCE7BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8edf7d7e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ChampDropRate extends React.Component {\r\n    render() {\r\n        let champDropRate = [\r\n            {\r\n                key: 'tier1',\r\n                name: 'Tier 1',\r\n                pool: 29,\r\n                cost: 1,\r\n                levels: [\r\n                    {\r\n                        level1: 100,\r\n                        level2: 100,\r\n                        level3: 70,\r\n                        level4: 50,\r\n                        level5: 35,\r\n                        level6: 25,\r\n                        level7: 20,\r\n                        level8: 15,\r\n                        level9: 10\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                key: 'tier2',\r\n                name: 'Tier 2',\r\n                pool: 22,\r\n                cost: 2,\r\n                levels: [\r\n                    {\r\n                        level1: null,\r\n                        level2: null,\r\n                        level3: 25,\r\n                        level4: 35,\r\n                        level5: 35,\r\n                        level6: 35,\r\n                        level7: 30,\r\n                        level8: 20,\r\n                        level9: 15\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                key: 'tier3',\r\n                name: 'Tier 3',\r\n                pool: 16,\r\n                cost: 3,\r\n                levels: [\r\n                    {\r\n                        level1: null,\r\n                        level2: null,\r\n                        level3: 5,\r\n                        level4: 15,\r\n                        level5: 25,\r\n                        level6: 30,\r\n                        level7: 33,\r\n                        level8: 35,\r\n                        level9: 30\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                key: 'tier4',\r\n                name: 'Tier 4',\r\n                pool: 12,\r\n                cost: 4,\r\n                levels: [\r\n                    {\r\n                        level1: null,\r\n                        level2: null,\r\n                        level3: null,\r\n                        level4: null,\r\n                        level5: 5,\r\n                        level6: 10,\r\n                        level7: 15,\r\n                        level8: 24,\r\n                        level9: 30\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                key: 'tier5',\r\n                name: 'Tier 5',\r\n                pool: 10,\r\n                cost: 5,\r\n                levels: [\r\n                    {\r\n                        level1: null,\r\n                        level2: null,\r\n                        level3: null,\r\n                        level4: null,\r\n                        level5: null,\r\n                        level6: null,\r\n                        level7: 2,\r\n                        level8: 6,\r\n                        level9: 15\r\n                    }\r\n                ]\r\n            }\r\n        ];\r\n        return (\r\n            <div>\r\n                {champDropRate.map(tier => {\r\n                    // return tier;\r\n                    console.log(tier);\r\n                    // return tier;\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChampDropRate;\r\n","import React from 'react';\r\n\r\nimport ChampDropRate from './ChampDropRates';\r\n\r\nclass API extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>Hello did it update?</div>\r\n                <div>\r\n                    <p>\r\n                        <ChampDropRate />\r\n                    </p>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default API;\r\n","import React from 'react';\nimport { HashRouter, Route, Link } from 'react-router-dom';\n\nimport './App.css';\nimport API from './components/API';\n\nfunction App() {\n    return (\n        <HashRouter basename=\"/\">\n            <div>\n                <Route exact path=\"/\" component={API} />\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}